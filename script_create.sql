-- Generated by Oracle SQL Developer Data Modeler 21.4.2.059.0838
--   at:        2022-06-02 20:45:56 EEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE OR REPLACE PACKAGE BICICLETE_PACK AS 
PROCEDURE ADD_BICICLETE
  (var_marca biciclete.marca%TYPE, var_culoare biciclete.culoare%TYPE, var_pret biciclete.pret%TYPE);
  PROCEDURE UPD_BICICLETE(var_id_bicicleta biciclete.id_bicicleta%TYPE,var_pret biciclete.pret%TYPE);
  PROCEDURE DEL_BICICLETE(var_id_bicicleta biciclete.id_bicicleta%TYPE);
END;
/

CREATE OR REPLACE PACKAGE CLIENTI_PACK
IS
  PROCEDURE ADD_CLIENTI
  (var_nume clienti.nume%TYPE, var_prenume clienti.prenume%TYPE, var_varsta detalii_clienti.varsta%TYPE,
    var_telefon  detalii_clienti.telefon%TYPE,
    var_adresa  detalii_clienti.adresa%TYPE,
    var_email   detalii_clienti.email%TYPE);
 PROCEDURE UPD_CLIENTI_ADRESA
  (var_id clienti.id_client%TYPE, var_adresa detalii_clienti.adresa%TYPE);
PROCEDURE UPD_CLIENTI_TELEFON
  (var_id clienti.id_client%TYPE, var_telefon detalii_clienti.telefon%TYPE);
 PROCEDURE DEL_CLIENTI
  (var_id clienti.id_client%TYPE);
END CLIENTI_PACK;
/

CREATE OR REPLACE PACKAGE INCHIRIERI_PACK
AS
  PROCEDURE ADD_INCHIRIERE
  (     v_data_inchiriere  IN inchirieri.data_inchiriere%TYPE,
        v_data_returnare   IN inchirieri.data_returnare%TYPE,
        v_id_bicicleta     IN inchirieri.id_bicicleta%TYPE,
        v_id_client        IN clienti.id_client%TYPE);
  PROCEDURE DEL_INCHIRIERI(var_id inchiriere.id_inchiriere%TYPE);
  PROCEDURE UPD_INCHIRIERI_START(var_id inchiriere.id_inchiriere%TYPE,var_inchiriere inchirieri.data_returnare%TYPE);
  PROCEDURE UPD_INCHIRIERI_RETUR(var_id inchiriere.id_inchiriere%TYPE,var_retur inchirieri.data_returnare%TYPE);
END INCHIRIERI_PACK;
/

CREATE OR REPLACE PACKAGE VIZUALIZARE_PACK
IS
  PROCEDURE VIZUALIZARE_INCHIRIERI_CLIENTI;
  PROCEDURE VIZUALIZARE_INCHIRIERI;
  PROCEDURE VIZUALIZARE_NR_INCHIRIERI_BICICLETE;
END VIZUALIZARE_PACK;
/

CREATE TABLE inchirieri (
    id_inchiriere   NUMBER(4) NOT NULL,
    data_inchiriere DATE NOT NULL,
    data_returnare  DATE NOT NULL,
    id_bicicleta    NUMBER(3) NOT NULL,
    id_client       NUMBER(5) NOT NULL,
    pret_inchiriere NUMBER(5, 2) NOT NULL
)
LOGGING;

ALTER TABLE inchirieri ADD CONSTRAINT inchirieri_pk PRIMARY KEY ( id_inchiriere );

CREATE OR REPLACE FUNCTION get_bicicleta (
    v_id IN inchiriere.id_inchiriere%TYPE
) RETURN inchirieri.id_bicicleta%TYPE IS
    v_bicicleta inchirieri.id_bicicleta%TYPE;
BEGIN
    SELECT
        id_bicicleta
    INTO v_bicicleta
    FROM
        inchirieri
    WHERE
        id_inchiriere = v_id;

    RETURN v_bicicleta;
END;
/

CREATE OR REPLACE FUNCTION get_client (
    v_id IN inchiriere.id_inchiriere%TYPE
) RETURN inchirieri.id_client%TYPE IS
    v_client inchirieri.id_client%TYPE;
BEGIN
    SELECT
        id_client
    INTO v_client
    FROM
        inchirieri
    WHERE
        id_inchiriere = v_id;

    RETURN v_client;
END;
/

CREATE TABLE clienti (
    id_client NUMBER(5) NOT NULL,
    nume      VARCHAR2(15) NOT NULL,
    prenume   VARCHAR2(15) NOT NULL
)
LOGGING;

ALTER TABLE clienti ADD CONSTRAINT clienti_pk PRIMARY KEY ( id_client );

CREATE OR REPLACE FUNCTION get_nume_client (
    v_id IN clienti.id_client%TYPE
) RETURN clienti.nume%TYPE IS
    v_nume clienti.nume%TYPE;
BEGIN
    SELECT
        nume
    INTO v_nume
    FROM
        clienti
    WHERE
        id_client = v_id;

    RETURN v_nume;
END;
/

FUNCTION get_prenume_client (
        v_id IN clienti.id_client%TYPE
    ) RETURN clienti.nume%TYPE IS
        v_prenume clienti.nume%TYPE;
    BEGIN
        SELECT
            prenume
        INTO v_prenume
        FROM
            clienti
        WHERE
            id_client = v_id;

        RETURN v_prenume;
    END;

/

CREATE TABLE biciclete (
    id_bicicleta NUMBER(3) NOT NULL,
    marca        VARCHAR2(20) NOT NULL,
    culoare      VARCHAR2(15) NOT NULL,
    pret         NUMBER(5, 2) NOT NULL
)
LOGGING;

ALTER TABLE biciclete ADD CONSTRAINT biciclete_pk PRIMARY KEY ( id_bicicleta );

CREATE OR REPLACE PROCEDURE update_pret
    IS
        CURSOR v_cursor IS SELECT * FROM inchirieri;
         v_pret NUMBER := 0;
    BEGIN
          FOR v IN v_cursor LOOP
          SELECT pret into v_pret FROM biciclete WHERE biciclete.id_bicicleta = v.id_bicicleta;
          UPDATE inchirieri 
          SET pret_inchiriere= (data_returnare - data_inchiriere) * v_pret
          WHERE id_inchiriere=v.id_inchiriere;
            
        END LOOP;
    END;
/

CREATE TABLE detalii_clienti (
    id_client NUMBER(5) NOT NULL,
    varsta    NUMBER(2) NOT NULL,
    telefon   VARCHAR2(10) NOT NULL,
    adresa    VARCHAR2(50) NOT NULL,
    email     VARCHAR2(20) NOT NULL
)
LOGGING;

ALTER TABLE detalii_clienti
    ADD CHECK ( length(telefon) = 10
                AND REGEXP_LIKE ( telefon,
                                  '^[07][0-9 ]*$' ) );

ALTER TABLE detalii_clienti ADD CHECK ( REGEXP_LIKE ( email,
                                                      '[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) );

ALTER TABLE detalii_clienti ADD CONSTRAINT detalii_clienti_pk PRIMARY KEY ( id_client );

ALTER TABLE detalii_clienti
    ADD CONSTRAINT detalii_clienti_clienti_fk FOREIGN KEY ( id_client )
        REFERENCES clienti ( id_client )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE inchirieri
    ADD CONSTRAINT inchirieri_biciclete_fk FOREIGN KEY ( id_bicicleta )
        REFERENCES biciclete ( id_bicicleta )
    NOT DEFERRABLE;

ALTER TABLE inchirieri
    ADD CONSTRAINT inchirieri_clienti_fk FOREIGN KEY ( id_client )
        REFERENCES clienti ( id_client )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER trg_delete_bicicleta 
    BEFORE DELETE ON Biciclete 
    FOR EACH ROW 
DECLARE
    v_id biciclete.id_bicicleta%TYPE;
    v_nr NUMBER := 0;
BEGIN
    SELECT count(*) into v_nr FROM inchirieri WHERE id_bicicleta = :old.id_bicicleta and data_inchiriere > sysdate;
    
    IF v_nr > 0 THEN
        RAISE_APPLICATION_ERROR(-20200, 'Bicicleta nu poate fi stearsa. Exista inchirieri cu ea .');
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER trg_delete_client 
    BEFORE DELETE ON Clienti 
    FOR EACH ROW 
DECLARE
    v_nr NUMBER := 0;
BEGIN
    SELECT count(*) into v_nr FROM inchirieri WHERE id_client = :old.id_client and data_returnare > sysdate;
    
    IF v_nr > 0 THEN
        RAISE_APPLICATION_ERROR(-20200, 'Clientul nu poate fi sters, are inchirieri facute.');
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER trg_insert_biciclete 
    BEFORE INSERT ON Biciclete 
    FOR EACH ROW 
DECLARE
    ultima_data_retur DATE;
    v_nr_de_inchirieri NUMBER(4);
BEGIN  
    SELECT COUNT(*) INTO v_nr_de_inchirieri FROM inchirieri WHERE id_bicicleta = :new.id_bicicleta;
    IF v_nr_de_inchirieri > 0 
    THEN
        SELECT MAX(data_returnare) INTO ultima_data_retur FROM inchirieri WHERE id_bicicleta = :new.id_bicicleta;
        IF (:new.data_inchiriere < ultima_data_retur)
        THEN
           RAISE_APPLICATION_ERROR( -20001,
                    'Data invalida: ' );
        END IF;
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER trg_program_inchirieri 
    BEFORE INSERT OR UPDATE OR DELETE ON Biciclete 
    FOR EACH ROW 
BEGIN
  IF TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
        NOT BETWEEN TO_DATE('09:00', 'HH24:MI')
          AND TO_DATE('20:00', 'HH24:MI')
  THEN
    RAISE_APPLICATION_ERROR(-20500, 'Se pot efectua modificari asupra datelor doar in timpul orelor de program!');
  END IF;
  END; 
/

CREATE OR REPLACE PACKAGE BODY biciclete_pack IS

    PROCEDURE add_biciclete (
        var_marca   biciclete.marca%TYPE,
        var_culoare biciclete.culoare%TYPE,
        var_pret    biciclete.pret%TYPE
    ) IS
    BEGIN
        INSERT INTO biciclete VALUES (
            NULL,
            var_marca,
            var_culoare,
            var_pret
        );

    EXCEPTION
        WHEN dup_val_on_index THEN
            dbms_output.put_line('Bicicleta este deja existenta!');
    END;

    PROCEDURE upd_biciclete (
        var_id_bicicleta biciclete.id_bicicleta%TYPE,
        var_pret         biciclete.pret%TYPE
    ) IS
    BEGIN
        UPDATE biciclete
        SET
            pret = var_pret
        WHERE
            id_bicicleta = var_id_bicicleta;

    END;

    PROCEDURE del_biciclete (
        var_id_bicicleta biciclete.id_bicicleta%TYPE
    ) IS
        no_data EXCEPTION;
    BEGIN
        DELETE FROM biciclete
        WHERE
            id_bicicleta = var_id_bicicleta;

        IF SQL%notfound THEN
            RAISE no_data;
        END IF;
    EXCEPTION
        WHEN no_data THEN
            dbms_output.put_line('Id-ul bicicletei nu se afla in baza de date!');
    END;

END biciclete_pack;
/

CREATE OR REPLACE PACKAGE BODY clienti_pack IS

    PROCEDURE add_clienti (
        var_nume    clienti.nume%TYPE,
        var_prenume clienti.prenume%TYPE,
        var_varsta  detalii_clienti.varsta%TYPE,
        var_telefon detalii_clienti.telefon%TYPE,
        var_adresa  detalii_clienti.adresa%TYPE,
        var_email   detalii_clienti.email%TYPE
    ) IS
--    varsta_prea_mica EXCEPTION;
--    PRAGMA exception_init( varsta_prea_mica, -20001 );

    BEGIN
--  IF var_varsta<14 then 
--    raise_application_error(-20001,'Persoanele sub 14 ani nu pot inchiria biciclete');
--  END IF;
        INSERT INTO clienti VALUES (
            NULL,
            var_nume,
            var_prenume
        );

        INSERT INTO detalii_clienti VALUES (
            clienti_id_client_seq.CURRVAL,
            var_varsta,
            var_telefon,
            var_adresa,
            var_email
        );

    EXCEPTION
        WHEN dup_val_on_index THEN
            dbms_output.put_line('Clientul este deja existent!');
--        ROLLBACK;
    END;

    PROCEDURE upd_clienti_adresa (
        var_id     clienti.id_client%TYPE,
        var_adresa detalii_clienti.adresa%TYPE
    ) IS
    BEGIN
        UPDATE detalii_clienti
        SET
            adresa = var_adresa
        WHERE
            id_client = var_id;

    END;

    PROCEDURE upd_clienti_telefon (
        var_id      clienti.id_client%TYPE,
        var_telefon detalii_clienti.telefon%TYPE
    ) IS
    BEGIN
        UPDATE detalii_clienti
        SET
            telefon = var_telefon
        WHERE
            id_client = var_id;

    END;

    PROCEDURE del_clienti (
        var_id clienti.id_client%TYPE
    ) IS
        no_data EXCEPTION;
    BEGIN
        DELETE FROM clienti
        WHERE
            id_client = var_id;

        IF SQL%notfound THEN
            RAISE no_data;
        END IF;
    EXCEPTION
        WHEN no_data THEN
            dbms_output.put_line('Id-ul clientului nu se afla in baza de date!');
    END;

END clienti_pack;
/

CREATE OR REPLACE PACKAGE BODY inchirieri_pack AS

    PROCEDURE add_inchiriere (
        v_data_inchiriere IN inchirieri.data_inchiriere%TYPE,
        v_data_returnare  IN inchirieri.data_returnare%TYPE,
        v_id_bicicleta    IN inchirieri.id_bicicleta%TYPE,
        v_id_client       IN clienti.id_client%TYPE
    ) IS

        v_tarif          biciclete.pret%TYPE;
        v_tarif_calculat inchirieri.pret_inchiriere%TYPE := 0;
        data_invalida EXCEPTION;
        data_egala EXCEPTION;
        CURSOR c_tarif IS
        SELECT
            pret
        FROM
            biciclete
        WHERE
            id_bicicleta = v_id_bicicleta;

    BEGIN
        OPEN c_tarif;
        LOOP
            FETCH c_tarif INTO v_tarif;
            EXIT WHEN c_tarif%notfound;
            v_tarif_calculat := ( v_data_returnare - v_data_inchiriere ) * v_tarif;
            BEGIN
                IF v_data_returnare < v_data_inchiriere THEN
                    RAISE data_invalida;
                ELSIF v_data_returnare = v_data_inchiriere THEN
                    RAISE data_egala;
                ELSE
                    INSERT INTO inchirieri VALUES (
                        NULL,
                        v_data_inchiriere,
                        v_data_returnare,
                        v_id_bicicleta,
                        v_id_client,
                        v_tarif_calculat
                    );

                    IF SQL%rowcount = 0 THEN
                        dbms_output.put_line('Bicicleta cu id-ul  '
                                             || v_id_bicicleta
                                             || ' nu exista');
                    END IF;

                END IF;
            EXCEPTION
                WHEN no_data_found THEN
                    dbms_output.put_line('SELECT did not return any row');
                WHEN data_invalida THEN
                    dbms_output.put_line('data_retur trebuie sa fie mai mare decat data_inchiriere');
                WHEN data_egala THEN
                    dbms_output.put_line('Masina poate fi inchiriata minim o zi');
                WHEN OTHERS THEN
                    dbms_output.put_line('Something else went wrong - '
                                         || sqlcode
                                         || ' : '
                                         || sqlerrm);
            END;

        END LOOP;

        CLOSE c_tarif;
    END add_inchiriere;

    PROCEDURE del_inchirieri (
        var_id inchiriere.id_inchiriere%TYPE
    ) IS
        no_data EXCEPTION;
    BEGIN
        DELETE FROM inchirieri
        WHERE
            id_inchiriere = var_id;

        IF SQL%notfound THEN
            RAISE no_data;
        END IF;
    EXCEPTION
        WHEN no_data THEN
            dbms_output.put_line('Id-ul inchirierii nu se afla in baza de date!');
    END;

    PROCEDURE upd_inchirieri_retur (
        var_id    inchiriere.id_inchiriere%TYPE,
        var_retur inchirieri.data_returnare%TYPE
    ) IS

        bicicleta_inchiriata EXCEPTION;
        interior EXCEPTION;
        data_invalida EXCEPTION;
        v_data_inchiriere          inchirieri.data_inchiriere%TYPE;
        v_data_returnare           inchirieri.data_returnare%TYPE;
        prima_data_inchiriere_dupa inchirieri.data_inchiriere%TYPE;
        v_nr                       NUMBER := 0;
        v_pret                     biciclete.pret%TYPE;
    BEGIN
        SELECT
            ( data_returnare )
        INTO v_data_returnare
        FROM
            inchirieri
        WHERE
            id_inchiriere = var_id;

        SELECT
            ( data_inchiriere )
        INTO v_data_inchiriere
        FROM
            inchirieri
        WHERE
            id_inchiriere = var_id;

        SELECT
            pret
        INTO v_pret
        FROM
            biciclete
        WHERE
            id_bicicleta = get_bicicleta(var_id);

        SELECT
            COUNT(*)
        INTO v_nr
        FROM
            inchirieri
        WHERE
                data_returnare > v_data_inchiriere
            AND id_bicicleta = get_bicicleta(var_id);

        IF ( v_nr < 1 ) THEN
            UPDATE inchirieri
            SET
                data_returnare = var_retur,
                pret_inchiriere = ( var_retur - data_inchiriere ) * v_pret
            WHERE
                id_inchiriere = var_id;

        ELSE
            SELECT
                MIN(data_inchiriere)
            INTO prima_data_inchiriere_dupa
            FROM
                inchirieri
            WHERE
                    data_inchiriere >= v_data_returnare
                AND id_bicicleta = get_bicicleta(var_id);

            IF ( prima_data_inchiriere_dupa = var_retur ) THEN
                RAISE bicicleta_inchiriata;
            ELSIF ( prima_data_inchiriere_dupa < var_retur ) THEN
                RAISE bicicleta_inchiriata;
            ELSIF ( v_data_inchiriere > var_retur ) THEN
                RAISE data_invalida;
            ELSE
                UPDATE inchirieri
                SET
                    data_returnare = var_retur,
                    pret_inchiriere = ( var_retur - data_inchiriere ) * v_pret
                WHERE
                    id_inchiriere = var_id;

            END IF;

        END IF;

    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('SELECT did not return any row');
        WHEN bicicleta_inchiriata THEN
            dbms_output.put_line('Bicicleta este deja inchiriata');
        WHEN data_invalida THEN
            dbms_output.put_line('data_returnare trebuie sa fie mai mare decat data_inchiriere');
        WHEN OTHERS THEN
            dbms_output.put_line('Something else went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
    END;

    PROCEDURE upd_inchirieri_inceput (
        var_id         inchiriere.id_inchiriere%TYPE,
        var_inchiriere inchirieri.data_inchiriere%TYPE
    ) IS

        bicicleta_inchiriata EXCEPTION;
        data_invalida EXCEPTION;
        v_data_inchiriere             inchirieri.data_inchiriere%TYPE;
        v_data_returnare              inchirieri.data_returnare%TYPE;
        ultima_data_returnare_inainte inchirieri.data_returnare%TYPE;
        v_nr                          NUMBER := 0;
        v_pret                        biciclete.pret%TYPE;
    BEGIN
        SELECT
            ( data_returnare )
        INTO v_data_returnare
        FROM
            inchirieri
        WHERE
            id_inchiriere = var_id;

        SELECT
            ( data_inchiriere )
        INTO v_data_inchiriere
        FROM
            inchirieri
        WHERE
            id_inchiriere = var_id;

        SELECT
            pret
        INTO v_pret
        FROM
            biciclete
        WHERE
            id_bicicleta = get_bicicleta(var_id);

        SELECT
            COUNT(*)
        INTO v_nr
        FROM
            inchirieri
        WHERE
                data_returnare <= v_data_inchiriere
            AND id_bicicleta = get_bicicleta(var_id);

        IF ( v_nr < 1 ) THEN
            UPDATE inchirieri
            SET
                data_inchiriere = var_inchiriere,
                pret_inchiriere = ( data_returnare - var_inchiriere ) * v_pret
            WHERE
                id_inchiriere = var_id;

        ELSE
            SELECT
                MAX(data_returnare)
            INTO ultima_data_returnare_inainte
            FROM
                inchirieri
            WHERE
                    data_returnare < v_data_inchiriere
                AND id_bicicleta = get_bicicleta(var_id);

            dbms_output.put_line(ultima_data_returnare_inainte);
            IF ( ultima_data_returnare_inainte = var_inchiriere ) THEN
                RAISE bicicleta_inchiriata;
            ELSIF ( ultima_data_returnare_inainte > var_inchiriere ) THEN
                RAISE bicicleta_inchiriata;
            ELSIF ( v_data_returnare < var_inchiriere ) THEN
                RAISE data_invalida;
            ELSE
                UPDATE inchirieri
                SET
                    data_inchiriere = var_inchiriere,
                    pret_inchiriere = ( data_returnare - var_inchiriere ) * v_pret
                WHERE
                    id_inchiriere = var_id;

            END IF;

        END IF;

    EXCEPTION
        WHEN bicicleta_inchiriata THEN
            dbms_output.put_line('Bicicleta este deja inchiriata');
        WHEN data_invalida THEN
            dbms_output.put_line('data_returnare trebuie sa fie mai mare decat data_inchiriere');
        WHEN OTHERS THEN
            dbms_output.put_line('Something else went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
    END;

END inchirieri_pack;
/

CREATE OR REPLACE PACKAGE BODY vizualizare_pack IS

    PROCEDURE vizualizare_inchirieri_clienti IS

        CURSOR c1 IS
        SELECT DISTINCT
            nume,
            prenume,
            marca
        FROM
            clienti, biciclete
            CROSS JOIN inchirieri
        WHERE
                clienti.id_client = inchirieri.id_client
            AND biciclete.id_bicicleta = inchirieri.id_bicicleta;

    BEGIN
        FOR i IN c1 LOOP
            dbms_output.put_line('Clientul '
                                 || i.nume
                                 || ' '
                                 || i.prenume
                                 || ' a inchiriat o bicicleta '
                                 || i.marca);
        END LOOP;
    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('SELECT did not return any row');
    END vizualizare_inchirieri_clienti;

    PROCEDURE vizualizare_inchirieri IS
        CURSOR c2 IS
        SELECT
            *
        FROM
            inchirieri;

    BEGIN
        FOR i IN c2 LOOP
            dbms_output.put_line('Bicicleta cu id-ul  '
                                 || i.id_bicicleta
                                 || ' este inchiriata de la '
                                 || i.data_inchiriere
                                 || ' pana la '
                                 || i.data_returnare
                                 || ' de clientul '
                                 || i.id_client);
        END LOOP;
    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('SELECT did not return any row');
    END vizualizare_inchirieri;

    PROCEDURE vizualizare_nr_inchirieri_biciclete IS
        nr NUMBER := 0;
        CURSOR c2 IS
        SELECT
            *
        FROM
            biciclete;

    BEGIN
        FOR i IN c2 LOOP
            SELECT
                COUNT(*)
            INTO nr
            FROM
                inchirieri
            WHERE
                id_bicicleta = i.id_bicicleta;

            dbms_output.put_line('Bicicleta cu id-ul '
                                 || i.id_bicicleta
                                 || ' a fost inchiriata de '
                                 || nr
                                 || ' ori ');

        END LOOP;
    END vizualizare_nr_inchirieri_biciclete;

END vizualizare_pack;
/

CREATE SEQUENCE Biciclete_id_bicicleta_SEQ 
START WITH 1 
    MAXVALUE 999 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER Biciclete_id_bicicleta_TRG 
BEFORE INSERT ON Biciclete 
FOR EACH ROW 
WHEN (NEW.id_bicicleta IS NULL) 
BEGIN
:new.id_bicicleta := biciclete_id_bicicleta_seq.nextval;

end;
/

CREATE SEQUENCE Clienti_id_client_SEQ 
START WITH 10000 
    MAXVALUE 99999 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER Clienti_id_client_TRG 
BEFORE INSERT ON Clienti 
FOR EACH ROW 
WHEN (NEW.id_client IS NULL) 
BEGIN
:new.id_client := clienti_id_client_seq.nextval;

end;
/

CREATE SEQUENCE Inchirieri_id_inchiriere_SEQ 
START WITH 1000 
    MAXVALUE 9999 
    NOCACHE 
    ORDER ;

CREATE OR REPLACE TRIGGER Inchirieri_id_inchiriere_TRG 
BEFORE INSERT ON Inchirieri 
FOR EACH ROW 
WHEN (NEW.id_inchiriere IS NULL) 
BEGIN
:new.id_inchiriere := inchirieri_id_inchiriere_seq.nextval;

end;
/
